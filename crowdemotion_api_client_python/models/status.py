# coding: utf-8

"""
    CloudEmotion API v1

    CrowdEmotion API

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Status(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, upload_status=None, privacy_status=None, license=None, embeddable=None, public_stats_viewable=None):
        """
        Status - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'upload_status': 'str',
            'privacy_status': 'str',
            'license': 'str',
            'embeddable': 'str',
            'public_stats_viewable': 'str'
        }

        self.attribute_map = {
            'upload_status': 'uploadStatus',
            'privacy_status': 'privacyStatus',
            'license': 'license',
            'embeddable': 'embeddable',
            'public_stats_viewable': 'publicStatsViewable'
        }

        self._upload_status = upload_status
        self._privacy_status = privacy_status
        self._license = license
        self._embeddable = embeddable
        self._public_stats_viewable = public_stats_viewable

    @property
    def upload_status(self):
        """
        Gets the upload_status of this Status.
        

        :return: The upload_status of this Status.
        :rtype: str
        """
        return self._upload_status

    @upload_status.setter
    def upload_status(self, upload_status):
        """
        Sets the upload_status of this Status.
        

        :param upload_status: The upload_status of this Status.
        :type: str
        """

        self._upload_status = upload_status

    @property
    def privacy_status(self):
        """
        Gets the privacy_status of this Status.
        

        :return: The privacy_status of this Status.
        :rtype: str
        """
        return self._privacy_status

    @privacy_status.setter
    def privacy_status(self, privacy_status):
        """
        Sets the privacy_status of this Status.
        

        :param privacy_status: The privacy_status of this Status.
        :type: str
        """

        self._privacy_status = privacy_status

    @property
    def license(self):
        """
        Gets the license of this Status.
        

        :return: The license of this Status.
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """
        Sets the license of this Status.
        

        :param license: The license of this Status.
        :type: str
        """

        self._license = license

    @property
    def embeddable(self):
        """
        Gets the embeddable of this Status.
        

        :return: The embeddable of this Status.
        :rtype: str
        """
        return self._embeddable

    @embeddable.setter
    def embeddable(self, embeddable):
        """
        Sets the embeddable of this Status.
        

        :param embeddable: The embeddable of this Status.
        :type: str
        """

        self._embeddable = embeddable

    @property
    def public_stats_viewable(self):
        """
        Gets the public_stats_viewable of this Status.
        

        :return: The public_stats_viewable of this Status.
        :rtype: str
        """
        return self._public_stats_viewable

    @public_stats_viewable.setter
    def public_stats_viewable(self, public_stats_viewable):
        """
        Sets the public_stats_viewable of this Status.
        

        :param public_stats_viewable: The public_stats_viewable of this Status.
        :type: str
        """

        self._public_stats_viewable = public_stats_viewable

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
