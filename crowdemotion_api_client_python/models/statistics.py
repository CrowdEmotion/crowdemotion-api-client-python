# coding: utf-8

"""
    CloudEmotion API v1

    CrowdEmotion API

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Statistics(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, view_count=None, like_count=None, dislike_count=None, favorite_count=None, comment_count=None):
        """
        Statistics - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'view_count': 'int',
            'like_count': 'int',
            'dislike_count': 'int',
            'favorite_count': 'int',
            'comment_count': 'int'
        }

        self.attribute_map = {
            'view_count': 'viewCount',
            'like_count': 'likeCount',
            'dislike_count': 'dislikeCount',
            'favorite_count': 'favoriteCount',
            'comment_count': 'commentCount'
        }

        self._view_count = view_count
        self._like_count = like_count
        self._dislike_count = dislike_count
        self._favorite_count = favorite_count
        self._comment_count = comment_count

    @property
    def view_count(self):
        """
        Gets the view_count of this Statistics.
        

        :return: The view_count of this Statistics.
        :rtype: int
        """
        return self._view_count

    @view_count.setter
    def view_count(self, view_count):
        """
        Sets the view_count of this Statistics.
        

        :param view_count: The view_count of this Statistics.
        :type: int
        """

        self._view_count = view_count

    @property
    def like_count(self):
        """
        Gets the like_count of this Statistics.
        

        :return: The like_count of this Statistics.
        :rtype: int
        """
        return self._like_count

    @like_count.setter
    def like_count(self, like_count):
        """
        Sets the like_count of this Statistics.
        

        :param like_count: The like_count of this Statistics.
        :type: int
        """

        self._like_count = like_count

    @property
    def dislike_count(self):
        """
        Gets the dislike_count of this Statistics.
        

        :return: The dislike_count of this Statistics.
        :rtype: int
        """
        return self._dislike_count

    @dislike_count.setter
    def dislike_count(self, dislike_count):
        """
        Sets the dislike_count of this Statistics.
        

        :param dislike_count: The dislike_count of this Statistics.
        :type: int
        """

        self._dislike_count = dislike_count

    @property
    def favorite_count(self):
        """
        Gets the favorite_count of this Statistics.
        

        :return: The favorite_count of this Statistics.
        :rtype: int
        """
        return self._favorite_count

    @favorite_count.setter
    def favorite_count(self, favorite_count):
        """
        Sets the favorite_count of this Statistics.
        

        :param favorite_count: The favorite_count of this Statistics.
        :type: int
        """

        self._favorite_count = favorite_count

    @property
    def comment_count(self):
        """
        Gets the comment_count of this Statistics.
        

        :return: The comment_count of this Statistics.
        :rtype: int
        """
        return self._comment_count

    @comment_count.setter
    def comment_count(self, comment_count):
        """
        Sets the comment_count of this Statistics.
        

        :param comment_count: The comment_count of this Statistics.
        :type: int
        """

        self._comment_count = comment_count

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
