# coding: utf-8

"""
    CloudEmotion API v1

    CrowdEmotion API

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Stats(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, media=None, visited=None, started=None, partial=None, completes=None, processed=None, failed=None, unprocessed=None, last_updated=None):
        """
        Stats - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'media': 'int',
            'visited': 'int',
            'started': 'int',
            'partial': 'int',
            'completes': 'int',
            'processed': 'int',
            'failed': 'int',
            'unprocessed': 'int',
            'last_updated': 'str'
        }

        self.attribute_map = {
            'media': 'media',
            'visited': 'visited',
            'started': 'started',
            'partial': 'partial',
            'completes': 'completes',
            'processed': 'processed',
            'failed': 'failed',
            'unprocessed': 'unprocessed',
            'last_updated': 'lastUpdated'
        }

        self._media = media
        self._visited = visited
        self._started = started
        self._partial = partial
        self._completes = completes
        self._processed = processed
        self._failed = failed
        self._unprocessed = unprocessed
        self._last_updated = last_updated

    @property
    def media(self):
        """
        Gets the media of this Stats.
        

        :return: The media of this Stats.
        :rtype: int
        """
        return self._media

    @media.setter
    def media(self, media):
        """
        Sets the media of this Stats.
        

        :param media: The media of this Stats.
        :type: int
        """

        self._media = media

    @property
    def visited(self):
        """
        Gets the visited of this Stats.
        

        :return: The visited of this Stats.
        :rtype: int
        """
        return self._visited

    @visited.setter
    def visited(self, visited):
        """
        Sets the visited of this Stats.
        

        :param visited: The visited of this Stats.
        :type: int
        """

        self._visited = visited

    @property
    def started(self):
        """
        Gets the started of this Stats.
        

        :return: The started of this Stats.
        :rtype: int
        """
        return self._started

    @started.setter
    def started(self, started):
        """
        Sets the started of this Stats.
        

        :param started: The started of this Stats.
        :type: int
        """

        self._started = started

    @property
    def partial(self):
        """
        Gets the partial of this Stats.
        

        :return: The partial of this Stats.
        :rtype: int
        """
        return self._partial

    @partial.setter
    def partial(self, partial):
        """
        Sets the partial of this Stats.
        

        :param partial: The partial of this Stats.
        :type: int
        """

        self._partial = partial

    @property
    def completes(self):
        """
        Gets the completes of this Stats.
        

        :return: The completes of this Stats.
        :rtype: int
        """
        return self._completes

    @completes.setter
    def completes(self, completes):
        """
        Sets the completes of this Stats.
        

        :param completes: The completes of this Stats.
        :type: int
        """

        self._completes = completes

    @property
    def processed(self):
        """
        Gets the processed of this Stats.
        

        :return: The processed of this Stats.
        :rtype: int
        """
        return self._processed

    @processed.setter
    def processed(self, processed):
        """
        Sets the processed of this Stats.
        

        :param processed: The processed of this Stats.
        :type: int
        """

        self._processed = processed

    @property
    def failed(self):
        """
        Gets the failed of this Stats.
        

        :return: The failed of this Stats.
        :rtype: int
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """
        Sets the failed of this Stats.
        

        :param failed: The failed of this Stats.
        :type: int
        """

        self._failed = failed

    @property
    def unprocessed(self):
        """
        Gets the unprocessed of this Stats.
        

        :return: The unprocessed of this Stats.
        :rtype: int
        """
        return self._unprocessed

    @unprocessed.setter
    def unprocessed(self, unprocessed):
        """
        Sets the unprocessed of this Stats.
        

        :param unprocessed: The unprocessed of this Stats.
        :type: int
        """

        self._unprocessed = unprocessed

    @property
    def last_updated(self):
        """
        Gets the last_updated of this Stats.
        

        :return: The last_updated of this Stats.
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """
        Sets the last_updated of this Stats.
        

        :param last_updated: The last_updated of this Stats.
        :type: str
        """

        self._last_updated = last_updated

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
