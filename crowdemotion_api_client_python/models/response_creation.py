# coding: utf-8

"""
    CloudEmotion API v1

    CrowdEmotion API

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ResponseCreation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, research_id=None, media_id=None, respondent_id=None):
        """
        ResponseCreation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'research_id': 'int',
            'media_id': 'int',
            'respondent_id': 'int'
        }

        self.attribute_map = {
            'research_id': 'research_id',
            'media_id': 'media_id',
            'respondent_id': 'respondent_id'
        }

        self._research_id = research_id
        self._media_id = media_id
        self._respondent_id = respondent_id

    @property
    def research_id(self):
        """
        Gets the research_id of this ResponseCreation.
        

        :return: The research_id of this ResponseCreation.
        :rtype: int
        """
        return self._research_id

    @research_id.setter
    def research_id(self, research_id):
        """
        Sets the research_id of this ResponseCreation.
        

        :param research_id: The research_id of this ResponseCreation.
        :type: int
        """

        self._research_id = research_id

    @property
    def media_id(self):
        """
        Gets the media_id of this ResponseCreation.
        

        :return: The media_id of this ResponseCreation.
        :rtype: int
        """
        return self._media_id

    @media_id.setter
    def media_id(self, media_id):
        """
        Sets the media_id of this ResponseCreation.
        

        :param media_id: The media_id of this ResponseCreation.
        :type: int
        """

        self._media_id = media_id

    @property
    def respondent_id(self):
        """
        Gets the respondent_id of this ResponseCreation.
        

        :return: The respondent_id of this ResponseCreation.
        :rtype: int
        """
        return self._respondent_id

    @respondent_id.setter
    def respondent_id(self, respondent_id):
        """
        Sets the respondent_id of this ResponseCreation.
        

        :param respondent_id: The respondent_id of this ResponseCreation.
        :type: int
        """

        self._respondent_id = respondent_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
