# coding: utf-8

"""
    CloudEmotion API v1

    CrowdEmotion API

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Respondent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, email=None, first_name=None, last_name=None, last_login=None, modified=None, username=None):
        """
        Respondent - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'email': 'str',
            'first_name': 'str',
            'last_name': 'str',
            'last_login': 'datetime',
            'modified': 'datetime',
            'username': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'email': 'email',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'last_login': 'lastLogin',
            'modified': 'modified',
            'username': 'username'
        }

        self._id = id
        self._email = email
        self._first_name = first_name
        self._last_name = last_name
        self._last_login = last_login
        self._modified = modified
        self._username = username

    @property
    def id(self):
        """
        Gets the id of this Respondent.
        

        :return: The id of this Respondent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Respondent.
        

        :param id: The id of this Respondent.
        :type: str
        """

        self._id = id

    @property
    def email(self):
        """
        Gets the email of this Respondent.
        

        :return: The email of this Respondent.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this Respondent.
        

        :param email: The email of this Respondent.
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """
        Gets the first_name of this Respondent.
        

        :return: The first_name of this Respondent.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this Respondent.
        

        :param first_name: The first_name of this Respondent.
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """
        Gets the last_name of this Respondent.
        

        :return: The last_name of this Respondent.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this Respondent.
        

        :param last_name: The last_name of this Respondent.
        :type: str
        """

        self._last_name = last_name

    @property
    def last_login(self):
        """
        Gets the last_login of this Respondent.
        

        :return: The last_login of this Respondent.
        :rtype: datetime
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """
        Sets the last_login of this Respondent.
        

        :param last_login: The last_login of this Respondent.
        :type: datetime
        """

        self._last_login = last_login

    @property
    def modified(self):
        """
        Gets the modified of this Respondent.
        

        :return: The modified of this Respondent.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """
        Sets the modified of this Respondent.
        

        :param modified: The modified of this Respondent.
        :type: datetime
        """

        self._modified = modified

    @property
    def username(self):
        """
        Gets the username of this Respondent.
        

        :return: The username of this Respondent.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this Respondent.
        

        :param username: The username of this Respondent.
        :type: str
        """

        self._username = username

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
