# coding: utf-8

"""
    CloudEmotion API v1

    CrowdEmotion API

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Tags(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, duration=None, name=None, t=None, x=None, y=None, media_id=None, time_created=None, uuid=None, version=None, created=None, modified=None):
        """
        Tags - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'duration': 'int',
            'name': 'str',
            't': 'int',
            'x': 'str',
            'y': 'str',
            'media_id': 'int',
            'time_created': 'datetime',
            'uuid': 'str',
            'version': 'int',
            'created': 'bool',
            'modified': 'bool'
        }

        self.attribute_map = {
            'id': 'id',
            'duration': 'duration',
            'name': 'name',
            't': 't',
            'x': 'x',
            'y': 'y',
            'media_id': 'media_id',
            'time_created': 'timeCreated',
            'uuid': 'uuid',
            'version': 'version',
            'created': 'created',
            'modified': 'modified'
        }

        self._id = id
        self._duration = duration
        self._name = name
        self._t = t
        self._x = x
        self._y = y
        self._media_id = media_id
        self._time_created = time_created
        self._uuid = uuid
        self._version = version
        self._created = created
        self._modified = modified

    @property
    def id(self):
        """
        Gets the id of this Tags.
        

        :return: The id of this Tags.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Tags.
        

        :param id: The id of this Tags.
        :type: int
        """

        self._id = id

    @property
    def duration(self):
        """
        Gets the duration of this Tags.
        

        :return: The duration of this Tags.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """
        Sets the duration of this Tags.
        

        :param duration: The duration of this Tags.
        :type: int
        """

        self._duration = duration

    @property
    def name(self):
        """
        Gets the name of this Tags.
        

        :return: The name of this Tags.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Tags.
        

        :param name: The name of this Tags.
        :type: str
        """

        self._name = name

    @property
    def t(self):
        """
        Gets the t of this Tags.
        

        :return: The t of this Tags.
        :rtype: int
        """
        return self._t

    @t.setter
    def t(self, t):
        """
        Sets the t of this Tags.
        

        :param t: The t of this Tags.
        :type: int
        """

        self._t = t

    @property
    def x(self):
        """
        Gets the x of this Tags.
        

        :return: The x of this Tags.
        :rtype: str
        """
        return self._x

    @x.setter
    def x(self, x):
        """
        Sets the x of this Tags.
        

        :param x: The x of this Tags.
        :type: str
        """

        self._x = x

    @property
    def y(self):
        """
        Gets the y of this Tags.
        

        :return: The y of this Tags.
        :rtype: str
        """
        return self._y

    @y.setter
    def y(self, y):
        """
        Sets the y of this Tags.
        

        :param y: The y of this Tags.
        :type: str
        """

        self._y = y

    @property
    def media_id(self):
        """
        Gets the media_id of this Tags.
        

        :return: The media_id of this Tags.
        :rtype: int
        """
        return self._media_id

    @media_id.setter
    def media_id(self, media_id):
        """
        Sets the media_id of this Tags.
        

        :param media_id: The media_id of this Tags.
        :type: int
        """

        self._media_id = media_id

    @property
    def time_created(self):
        """
        Gets the time_created of this Tags.
        

        :return: The time_created of this Tags.
        :rtype: datetime
        """
        return self._time_created

    @time_created.setter
    def time_created(self, time_created):
        """
        Sets the time_created of this Tags.
        

        :param time_created: The time_created of this Tags.
        :type: datetime
        """

        self._time_created = time_created

    @property
    def uuid(self):
        """
        Gets the uuid of this Tags.
        

        :return: The uuid of this Tags.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this Tags.
        

        :param uuid: The uuid of this Tags.
        :type: str
        """

        self._uuid = uuid

    @property
    def version(self):
        """
        Gets the version of this Tags.
        

        :return: The version of this Tags.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this Tags.
        

        :param version: The version of this Tags.
        :type: int
        """

        self._version = version

    @property
    def created(self):
        """
        Gets the created of this Tags.
        

        :return: The created of this Tags.
        :rtype: bool
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this Tags.
        

        :param created: The created of this Tags.
        :type: bool
        """

        self._created = created

    @property
    def modified(self):
        """
        Gets the modified of this Tags.
        

        :return: The modified of this Tags.
        :rtype: bool
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """
        Sets the modified of this Tags.
        

        :param modified: The modified of this Tags.
        :type: bool
        """

        self._modified = modified

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
