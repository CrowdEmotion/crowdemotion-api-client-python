# coding: utf-8

"""
    CloudEmotion API v1

    CrowdEmotion API

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Timeseries(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, response_id=None, metric_id=None, metric_name=None, start_index=None, end_index=None, step_size=None, custom_message=None, data=None):
        """
        Timeseries - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'response_id': 'int',
            'metric_id': 'int',
            'metric_name': 'str',
            'start_index': 'int',
            'end_index': 'int',
            'step_size': 'int',
            'custom_message': 'str',
            'data': 'list[int]'
        }

        self.attribute_map = {
            'response_id': 'responseId',
            'metric_id': 'metricId',
            'metric_name': 'metricName',
            'start_index': 'startIndex',
            'end_index': 'endIndex',
            'step_size': 'stepSize',
            'custom_message': 'customMessage',
            'data': 'data'
        }

        self._response_id = response_id
        self._metric_id = metric_id
        self._metric_name = metric_name
        self._start_index = start_index
        self._end_index = end_index
        self._step_size = step_size
        self._custom_message = custom_message
        self._data = data

    @property
    def response_id(self):
        """
        Gets the response_id of this Timeseries.
        

        :return: The response_id of this Timeseries.
        :rtype: int
        """
        return self._response_id

    @response_id.setter
    def response_id(self, response_id):
        """
        Sets the response_id of this Timeseries.
        

        :param response_id: The response_id of this Timeseries.
        :type: int
        """

        self._response_id = response_id

    @property
    def metric_id(self):
        """
        Gets the metric_id of this Timeseries.
        

        :return: The metric_id of this Timeseries.
        :rtype: int
        """
        return self._metric_id

    @metric_id.setter
    def metric_id(self, metric_id):
        """
        Sets the metric_id of this Timeseries.
        

        :param metric_id: The metric_id of this Timeseries.
        :type: int
        """

        self._metric_id = metric_id

    @property
    def metric_name(self):
        """
        Gets the metric_name of this Timeseries.
        

        :return: The metric_name of this Timeseries.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """
        Sets the metric_name of this Timeseries.
        

        :param metric_name: The metric_name of this Timeseries.
        :type: str
        """

        self._metric_name = metric_name

    @property
    def start_index(self):
        """
        Gets the start_index of this Timeseries.
        

        :return: The start_index of this Timeseries.
        :rtype: int
        """
        return self._start_index

    @start_index.setter
    def start_index(self, start_index):
        """
        Sets the start_index of this Timeseries.
        

        :param start_index: The start_index of this Timeseries.
        :type: int
        """

        self._start_index = start_index

    @property
    def end_index(self):
        """
        Gets the end_index of this Timeseries.
        

        :return: The end_index of this Timeseries.
        :rtype: int
        """
        return self._end_index

    @end_index.setter
    def end_index(self, end_index):
        """
        Sets the end_index of this Timeseries.
        

        :param end_index: The end_index of this Timeseries.
        :type: int
        """

        self._end_index = end_index

    @property
    def step_size(self):
        """
        Gets the step_size of this Timeseries.
        

        :return: The step_size of this Timeseries.
        :rtype: int
        """
        return self._step_size

    @step_size.setter
    def step_size(self, step_size):
        """
        Sets the step_size of this Timeseries.
        

        :param step_size: The step_size of this Timeseries.
        :type: int
        """

        self._step_size = step_size

    @property
    def custom_message(self):
        """
        Gets the custom_message of this Timeseries.
        

        :return: The custom_message of this Timeseries.
        :rtype: str
        """
        return self._custom_message

    @custom_message.setter
    def custom_message(self, custom_message):
        """
        Sets the custom_message of this Timeseries.
        

        :param custom_message: The custom_message of this Timeseries.
        :type: str
        """

        self._custom_message = custom_message

    @property
    def data(self):
        """
        Gets the data of this Timeseries.


        :return: The data of this Timeseries.
        :rtype: list[int]
        """
        return self._data

    @data.setter
    def data(self, data):
        """
        Sets the data of this Timeseries.


        :param data: The data of this Timeseries.
        :type: list[int]
        """

        self._data = data

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
