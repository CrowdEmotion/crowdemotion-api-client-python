# coding: utf-8

"""
    CloudEmotion API v1

    CrowdEmotion API

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ResearchCreation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, title=None, description=None, ready=None, complete=None, archived=None, outgoing_url=None, custom_data=None):
        """
        ResearchCreation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'title': 'str',
            'description': 'str',
            'ready': 'bool',
            'complete': 'bool',
            'archived': 'bool',
            'outgoing_url': 'str',
            'custom_data': 'str'
        }

        self.attribute_map = {
            'title': 'title',
            'description': 'description',
            'ready': 'ready',
            'complete': 'complete',
            'archived': 'archived',
            'outgoing_url': 'outgoingUrl',
            'custom_data': 'customData'
        }

        self._title = title
        self._description = description
        self._ready = ready
        self._complete = complete
        self._archived = archived
        self._outgoing_url = outgoing_url
        self._custom_data = custom_data

    @property
    def title(self):
        """
        Gets the title of this ResearchCreation.
        

        :return: The title of this ResearchCreation.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this ResearchCreation.
        

        :param title: The title of this ResearchCreation.
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """
        Gets the description of this ResearchCreation.
        

        :return: The description of this ResearchCreation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ResearchCreation.
        

        :param description: The description of this ResearchCreation.
        :type: str
        """

        self._description = description

    @property
    def ready(self):
        """
        Gets the ready of this ResearchCreation.
        

        :return: The ready of this ResearchCreation.
        :rtype: bool
        """
        return self._ready

    @ready.setter
    def ready(self, ready):
        """
        Sets the ready of this ResearchCreation.
        

        :param ready: The ready of this ResearchCreation.
        :type: bool
        """

        self._ready = ready

    @property
    def complete(self):
        """
        Gets the complete of this ResearchCreation.
        

        :return: The complete of this ResearchCreation.
        :rtype: bool
        """
        return self._complete

    @complete.setter
    def complete(self, complete):
        """
        Sets the complete of this ResearchCreation.
        

        :param complete: The complete of this ResearchCreation.
        :type: bool
        """

        self._complete = complete

    @property
    def archived(self):
        """
        Gets the archived of this ResearchCreation.
        

        :return: The archived of this ResearchCreation.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """
        Sets the archived of this ResearchCreation.
        

        :param archived: The archived of this ResearchCreation.
        :type: bool
        """

        self._archived = archived

    @property
    def outgoing_url(self):
        """
        Gets the outgoing_url of this ResearchCreation.
        

        :return: The outgoing_url of this ResearchCreation.
        :rtype: str
        """
        return self._outgoing_url

    @outgoing_url.setter
    def outgoing_url(self, outgoing_url):
        """
        Sets the outgoing_url of this ResearchCreation.
        

        :param outgoing_url: The outgoing_url of this ResearchCreation.
        :type: str
        """

        self._outgoing_url = outgoing_url

    @property
    def custom_data(self):
        """
        Gets the custom_data of this ResearchCreation.
        

        :return: The custom_data of this ResearchCreation.
        :rtype: str
        """
        return self._custom_data

    @custom_data.setter
    def custom_data(self, custom_data):
        """
        Sets the custom_data of this ResearchCreation.
        

        :param custom_data: The custom_data of this ResearchCreation.
        :type: str
        """

        self._custom_data = custom_data

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
