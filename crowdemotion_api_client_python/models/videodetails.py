# coding: utf-8

"""
    CloudEmotion API v1

    CrowdEmotion API

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Videodetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, content_details=None, status=None, statistics=None):
        """
        Videodetails - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'content_details': 'ContentDetails',
            'status': 'Status',
            'statistics': 'Statistics'
        }

        self.attribute_map = {
            'content_details': 'contentDetails',
            'status': 'status',
            'statistics': 'statistics'
        }

        self._content_details = content_details
        self._status = status
        self._statistics = statistics

    @property
    def content_details(self):
        """
        Gets the content_details of this Videodetails.


        :return: The content_details of this Videodetails.
        :rtype: ContentDetails
        """
        return self._content_details

    @content_details.setter
    def content_details(self, content_details):
        """
        Sets the content_details of this Videodetails.


        :param content_details: The content_details of this Videodetails.
        :type: ContentDetails
        """

        self._content_details = content_details

    @property
    def status(self):
        """
        Gets the status of this Videodetails.


        :return: The status of this Videodetails.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Videodetails.


        :param status: The status of this Videodetails.
        :type: Status
        """

        self._status = status

    @property
    def statistics(self):
        """
        Gets the statistics of this Videodetails.


        :return: The statistics of this Videodetails.
        :rtype: Statistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """
        Sets the statistics of this Videodetails.


        :param statistics: The statistics of this Videodetails.
        :type: Statistics
        """

        self._statistics = statistics

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
