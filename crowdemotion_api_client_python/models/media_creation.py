# coding: utf-8

"""
    CloudEmotion API v1

    CrowdEmotion API

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class MediaCreation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, media_path=None, research_id=None, length=None, video_order=None, tags=None, videodetails=None):
        """
        MediaCreation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'media_path': 'str',
            'research_id': 'int',
            'length': 'int',
            'video_order': 'int',
            'tags': 'list[Tags]',
            'videodetails': 'Videodetails'
        }

        self.attribute_map = {
            'name': 'name',
            'media_path': 'mediaPath',
            'research_id': 'research_id',
            'length': 'length',
            'video_order': 'videoOrder',
            'tags': 'tags',
            'videodetails': 'videodetails'
        }

        self._name = name
        self._media_path = media_path
        self._research_id = research_id
        self._length = length
        self._video_order = video_order
        self._tags = tags
        self._videodetails = videodetails

    @property
    def name(self):
        """
        Gets the name of this MediaCreation.
        

        :return: The name of this MediaCreation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this MediaCreation.
        

        :param name: The name of this MediaCreation.
        :type: str
        """

        self._name = name

    @property
    def media_path(self):
        """
        Gets the media_path of this MediaCreation.
        

        :return: The media_path of this MediaCreation.
        :rtype: str
        """
        return self._media_path

    @media_path.setter
    def media_path(self, media_path):
        """
        Sets the media_path of this MediaCreation.
        

        :param media_path: The media_path of this MediaCreation.
        :type: str
        """

        self._media_path = media_path

    @property
    def research_id(self):
        """
        Gets the research_id of this MediaCreation.
        

        :return: The research_id of this MediaCreation.
        :rtype: int
        """
        return self._research_id

    @research_id.setter
    def research_id(self, research_id):
        """
        Sets the research_id of this MediaCreation.
        

        :param research_id: The research_id of this MediaCreation.
        :type: int
        """

        self._research_id = research_id

    @property
    def length(self):
        """
        Gets the length of this MediaCreation.
        

        :return: The length of this MediaCreation.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """
        Sets the length of this MediaCreation.
        

        :param length: The length of this MediaCreation.
        :type: int
        """

        self._length = length

    @property
    def video_order(self):
        """
        Gets the video_order of this MediaCreation.
        

        :return: The video_order of this MediaCreation.
        :rtype: int
        """
        return self._video_order

    @video_order.setter
    def video_order(self, video_order):
        """
        Sets the video_order of this MediaCreation.
        

        :param video_order: The video_order of this MediaCreation.
        :type: int
        """

        self._video_order = video_order

    @property
    def tags(self):
        """
        Gets the tags of this MediaCreation.


        :return: The tags of this MediaCreation.
        :rtype: list[Tags]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this MediaCreation.


        :param tags: The tags of this MediaCreation.
        :type: list[Tags]
        """

        self._tags = tags

    @property
    def videodetails(self):
        """
        Gets the videodetails of this MediaCreation.


        :return: The videodetails of this MediaCreation.
        :rtype: Videodetails
        """
        return self._videodetails

    @videodetails.setter
    def videodetails(self, videodetails):
        """
        Sets the videodetails of this MediaCreation.


        :param videodetails: The videodetails of this MediaCreation.
        :type: Videodetails
        """

        self._videodetails = videodetails

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
