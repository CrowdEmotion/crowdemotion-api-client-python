# coding: utf-8

"""
    CloudEmotion API v1

    CrowdEmotion API

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Media(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, media_path=None, path=None, research_id=None, time_created=None, length_ms=None, length=None, video_order=None, tags=None, presigned_url=None, is_stored=None, is_url=None, is_you_tube=None, videodetails=None):
        """
        Media - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'name': 'str',
            'media_path': 'str',
            'path': 'str',
            'research_id': 'int',
            'time_created': 'datetime',
            'length_ms': 'int',
            'length': 'int',
            'video_order': 'int',
            'tags': 'list[Tags]',
            'presigned_url': 'str',
            'is_stored': 'bool',
            'is_url': 'bool',
            'is_you_tube': 'bool',
            'videodetails': 'Videodetails'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'media_path': 'mediaPath',
            'path': 'path',
            'research_id': 'researchId',
            'time_created': 'timeCreated',
            'length_ms': 'lengthMS',
            'length': 'length',
            'video_order': 'videoOrder',
            'tags': 'tags',
            'presigned_url': 'presignedUrl',
            'is_stored': 'isStored',
            'is_url': 'isURL',
            'is_you_tube': 'isYouTube',
            'videodetails': 'videodetails'
        }

        self._id = id
        self._name = name
        self._media_path = media_path
        self._path = path
        self._research_id = research_id
        self._time_created = time_created
        self._length_ms = length_ms
        self._length = length
        self._video_order = video_order
        self._tags = tags
        self._presigned_url = presigned_url
        self._is_stored = is_stored
        self._is_url = is_url
        self._is_you_tube = is_you_tube
        self._videodetails = videodetails

    @property
    def id(self):
        """
        Gets the id of this Media.
        

        :return: The id of this Media.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Media.
        

        :param id: The id of this Media.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Media.
        

        :return: The name of this Media.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Media.
        

        :param name: The name of this Media.
        :type: str
        """

        self._name = name

    @property
    def media_path(self):
        """
        Gets the media_path of this Media.
        

        :return: The media_path of this Media.
        :rtype: str
        """
        return self._media_path

    @media_path.setter
    def media_path(self, media_path):
        """
        Sets the media_path of this Media.
        

        :param media_path: The media_path of this Media.
        :type: str
        """

        self._media_path = media_path

    @property
    def path(self):
        """
        Gets the path of this Media.
        

        :return: The path of this Media.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this Media.
        

        :param path: The path of this Media.
        :type: str
        """

        self._path = path

    @property
    def research_id(self):
        """
        Gets the research_id of this Media.
        

        :return: The research_id of this Media.
        :rtype: int
        """
        return self._research_id

    @research_id.setter
    def research_id(self, research_id):
        """
        Sets the research_id of this Media.
        

        :param research_id: The research_id of this Media.
        :type: int
        """

        self._research_id = research_id

    @property
    def time_created(self):
        """
        Gets the time_created of this Media.
        

        :return: The time_created of this Media.
        :rtype: datetime
        """
        return self._time_created

    @time_created.setter
    def time_created(self, time_created):
        """
        Sets the time_created of this Media.
        

        :param time_created: The time_created of this Media.
        :type: datetime
        """

        self._time_created = time_created

    @property
    def length_ms(self):
        """
        Gets the length_ms of this Media.
        

        :return: The length_ms of this Media.
        :rtype: int
        """
        return self._length_ms

    @length_ms.setter
    def length_ms(self, length_ms):
        """
        Sets the length_ms of this Media.
        

        :param length_ms: The length_ms of this Media.
        :type: int
        """

        self._length_ms = length_ms

    @property
    def length(self):
        """
        Gets the length of this Media.
        

        :return: The length of this Media.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """
        Sets the length of this Media.
        

        :param length: The length of this Media.
        :type: int
        """

        self._length = length

    @property
    def video_order(self):
        """
        Gets the video_order of this Media.
        

        :return: The video_order of this Media.
        :rtype: int
        """
        return self._video_order

    @video_order.setter
    def video_order(self, video_order):
        """
        Sets the video_order of this Media.
        

        :param video_order: The video_order of this Media.
        :type: int
        """

        self._video_order = video_order

    @property
    def tags(self):
        """
        Gets the tags of this Media.


        :return: The tags of this Media.
        :rtype: list[Tags]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this Media.


        :param tags: The tags of this Media.
        :type: list[Tags]
        """

        self._tags = tags

    @property
    def presigned_url(self):
        """
        Gets the presigned_url of this Media.
        

        :return: The presigned_url of this Media.
        :rtype: str
        """
        return self._presigned_url

    @presigned_url.setter
    def presigned_url(self, presigned_url):
        """
        Sets the presigned_url of this Media.
        

        :param presigned_url: The presigned_url of this Media.
        :type: str
        """

        self._presigned_url = presigned_url

    @property
    def is_stored(self):
        """
        Gets the is_stored of this Media.
        

        :return: The is_stored of this Media.
        :rtype: bool
        """
        return self._is_stored

    @is_stored.setter
    def is_stored(self, is_stored):
        """
        Sets the is_stored of this Media.
        

        :param is_stored: The is_stored of this Media.
        :type: bool
        """

        self._is_stored = is_stored

    @property
    def is_url(self):
        """
        Gets the is_url of this Media.
        

        :return: The is_url of this Media.
        :rtype: bool
        """
        return self._is_url

    @is_url.setter
    def is_url(self, is_url):
        """
        Sets the is_url of this Media.
        

        :param is_url: The is_url of this Media.
        :type: bool
        """

        self._is_url = is_url

    @property
    def is_you_tube(self):
        """
        Gets the is_you_tube of this Media.
        

        :return: The is_you_tube of this Media.
        :rtype: bool
        """
        return self._is_you_tube

    @is_you_tube.setter
    def is_you_tube(self, is_you_tube):
        """
        Sets the is_you_tube of this Media.
        

        :param is_you_tube: The is_you_tube of this Media.
        :type: bool
        """

        self._is_you_tube = is_you_tube

    @property
    def videodetails(self):
        """
        Gets the videodetails of this Media.


        :return: The videodetails of this Media.
        :rtype: Videodetails
        """
        return self._videodetails

    @videodetails.setter
    def videodetails(self, videodetails):
        """
        Sets the videodetails of this Media.


        :param videodetails: The videodetails of this Media.
        :type: Videodetails
        """

        self._videodetails = videodetails

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
