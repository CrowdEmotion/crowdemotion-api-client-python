# coding: utf-8

"""
    CloudEmotion API v1

    CrowdEmotion API

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Research(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, time_created=None, uuid=None, key=None, title=None, description=None, ready=None, complete=None, archived=None, outgoing_url=None, custom_data=None, owner_id=None, company_id=None, stats=None):
        """
        Research - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'time_created': 'datetime',
            'uuid': 'str',
            'key': 'str',
            'title': 'str',
            'description': 'str',
            'ready': 'bool',
            'complete': 'bool',
            'archived': 'bool',
            'outgoing_url': 'str',
            'custom_data': 'str',
            'owner_id': 'int',
            'company_id': 'int',
            'stats': 'Stats'
        }

        self.attribute_map = {
            'id': 'id',
            'time_created': 'timeCreated',
            'uuid': 'uuid',
            'key': 'key',
            'title': 'title',
            'description': 'description',
            'ready': 'ready',
            'complete': 'complete',
            'archived': 'archived',
            'outgoing_url': 'outgoingUrl',
            'custom_data': 'customData',
            'owner_id': 'owner_id',
            'company_id': 'company_id',
            'stats': 'stats'
        }

        self._id = id
        self._time_created = time_created
        self._uuid = uuid
        self._key = key
        self._title = title
        self._description = description
        self._ready = ready
        self._complete = complete
        self._archived = archived
        self._outgoing_url = outgoing_url
        self._custom_data = custom_data
        self._owner_id = owner_id
        self._company_id = company_id
        self._stats = stats

    @property
    def id(self):
        """
        Gets the id of this Research.
        

        :return: The id of this Research.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Research.
        

        :param id: The id of this Research.
        :type: int
        """

        self._id = id

    @property
    def time_created(self):
        """
        Gets the time_created of this Research.
        

        :return: The time_created of this Research.
        :rtype: datetime
        """
        return self._time_created

    @time_created.setter
    def time_created(self, time_created):
        """
        Sets the time_created of this Research.
        

        :param time_created: The time_created of this Research.
        :type: datetime
        """

        self._time_created = time_created

    @property
    def uuid(self):
        """
        Gets the uuid of this Research.
        

        :return: The uuid of this Research.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this Research.
        

        :param uuid: The uuid of this Research.
        :type: str
        """

        self._uuid = uuid

    @property
    def key(self):
        """
        Gets the key of this Research.
        

        :return: The key of this Research.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """
        Sets the key of this Research.
        

        :param key: The key of this Research.
        :type: str
        """

        self._key = key

    @property
    def title(self):
        """
        Gets the title of this Research.
        

        :return: The title of this Research.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this Research.
        

        :param title: The title of this Research.
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """
        Gets the description of this Research.
        

        :return: The description of this Research.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Research.
        

        :param description: The description of this Research.
        :type: str
        """

        self._description = description

    @property
    def ready(self):
        """
        Gets the ready of this Research.
        

        :return: The ready of this Research.
        :rtype: bool
        """
        return self._ready

    @ready.setter
    def ready(self, ready):
        """
        Sets the ready of this Research.
        

        :param ready: The ready of this Research.
        :type: bool
        """

        self._ready = ready

    @property
    def complete(self):
        """
        Gets the complete of this Research.
        

        :return: The complete of this Research.
        :rtype: bool
        """
        return self._complete

    @complete.setter
    def complete(self, complete):
        """
        Sets the complete of this Research.
        

        :param complete: The complete of this Research.
        :type: bool
        """

        self._complete = complete

    @property
    def archived(self):
        """
        Gets the archived of this Research.
        

        :return: The archived of this Research.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """
        Sets the archived of this Research.
        

        :param archived: The archived of this Research.
        :type: bool
        """

        self._archived = archived

    @property
    def outgoing_url(self):
        """
        Gets the outgoing_url of this Research.
        

        :return: The outgoing_url of this Research.
        :rtype: str
        """
        return self._outgoing_url

    @outgoing_url.setter
    def outgoing_url(self, outgoing_url):
        """
        Sets the outgoing_url of this Research.
        

        :param outgoing_url: The outgoing_url of this Research.
        :type: str
        """

        self._outgoing_url = outgoing_url

    @property
    def custom_data(self):
        """
        Gets the custom_data of this Research.
        

        :return: The custom_data of this Research.
        :rtype: str
        """
        return self._custom_data

    @custom_data.setter
    def custom_data(self, custom_data):
        """
        Sets the custom_data of this Research.
        

        :param custom_data: The custom_data of this Research.
        :type: str
        """

        self._custom_data = custom_data

    @property
    def owner_id(self):
        """
        Gets the owner_id of this Research.
        

        :return: The owner_id of this Research.
        :rtype: int
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """
        Sets the owner_id of this Research.
        

        :param owner_id: The owner_id of this Research.
        :type: int
        """

        self._owner_id = owner_id

    @property
    def company_id(self):
        """
        Gets the company_id of this Research.
        

        :return: The company_id of this Research.
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """
        Sets the company_id of this Research.
        

        :param company_id: The company_id of this Research.
        :type: int
        """

        self._company_id = company_id

    @property
    def stats(self):
        """
        Gets the stats of this Research.


        :return: The stats of this Research.
        :rtype: Stats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """
        Sets the stats of this Research.


        :param stats: The stats of this Research.
        :type: Stats
        """

        self._stats = stats

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
