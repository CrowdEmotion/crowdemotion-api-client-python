# coding: utf-8

"""
    CloudEmotion API v1

    CrowdEmotion API

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Response(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, time_created=None, research_id=None, media_id=None, respondent_id=None, user_id=None, complete=None, used=None, company_id=None):
        """
        Response - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'time_created': 'datetime',
            'research_id': 'int',
            'media_id': 'int',
            'respondent_id': 'int',
            'user_id': 'int',
            'complete': 'bool',
            'used': 'bool',
            'company_id': 'int'
        }

        self.attribute_map = {
            'id': 'id',
            'time_created': 'timeCreated',
            'research_id': 'researchId',
            'media_id': 'mediaId',
            'respondent_id': 'respondentId',
            'user_id': 'userId',
            'complete': 'complete',
            'used': 'used',
            'company_id': 'company_id'
        }

        self._id = id
        self._time_created = time_created
        self._research_id = research_id
        self._media_id = media_id
        self._respondent_id = respondent_id
        self._user_id = user_id
        self._complete = complete
        self._used = used
        self._company_id = company_id

    @property
    def id(self):
        """
        Gets the id of this Response.
        

        :return: The id of this Response.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Response.
        

        :param id: The id of this Response.
        :type: int
        """

        self._id = id

    @property
    def time_created(self):
        """
        Gets the time_created of this Response.
        

        :return: The time_created of this Response.
        :rtype: datetime
        """
        return self._time_created

    @time_created.setter
    def time_created(self, time_created):
        """
        Sets the time_created of this Response.
        

        :param time_created: The time_created of this Response.
        :type: datetime
        """

        self._time_created = time_created

    @property
    def research_id(self):
        """
        Gets the research_id of this Response.
        

        :return: The research_id of this Response.
        :rtype: int
        """
        return self._research_id

    @research_id.setter
    def research_id(self, research_id):
        """
        Sets the research_id of this Response.
        

        :param research_id: The research_id of this Response.
        :type: int
        """

        self._research_id = research_id

    @property
    def media_id(self):
        """
        Gets the media_id of this Response.
        

        :return: The media_id of this Response.
        :rtype: int
        """
        return self._media_id

    @media_id.setter
    def media_id(self, media_id):
        """
        Sets the media_id of this Response.
        

        :param media_id: The media_id of this Response.
        :type: int
        """

        self._media_id = media_id

    @property
    def respondent_id(self):
        """
        Gets the respondent_id of this Response.
        

        :return: The respondent_id of this Response.
        :rtype: int
        """
        return self._respondent_id

    @respondent_id.setter
    def respondent_id(self, respondent_id):
        """
        Sets the respondent_id of this Response.
        

        :param respondent_id: The respondent_id of this Response.
        :type: int
        """

        self._respondent_id = respondent_id

    @property
    def user_id(self):
        """
        Gets the user_id of this Response.
        

        :return: The user_id of this Response.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this Response.
        

        :param user_id: The user_id of this Response.
        :type: int
        """

        self._user_id = user_id

    @property
    def complete(self):
        """
        Gets the complete of this Response.
        

        :return: The complete of this Response.
        :rtype: bool
        """
        return self._complete

    @complete.setter
    def complete(self, complete):
        """
        Sets the complete of this Response.
        

        :param complete: The complete of this Response.
        :type: bool
        """

        self._complete = complete

    @property
    def used(self):
        """
        Gets the used of this Response.
        

        :return: The used of this Response.
        :rtype: bool
        """
        return self._used

    @used.setter
    def used(self, used):
        """
        Sets the used of this Response.
        

        :param used: The used of this Response.
        :type: bool
        """

        self._used = used

    @property
    def company_id(self):
        """
        Gets the company_id of this Response.
        

        :return: The company_id of this Response.
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """
        Sets the company_id of this Response.
        

        :param company_id: The company_id of this Response.
        :type: int
        """

        self._company_id = company_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
